{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/search/search-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","address","city","CardList","console","log","map","mons","Search","type","placeholder","onChange","handlerEvent","App","state","monsterNames","searchField","fetch","then","response","json","resp","setState","this","filteredMons","filter","monst","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,iBAEN,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,QAAQC,YCNpBC,EAAW,SAACT,GAEvB,OADAU,QAAQC,IAAIX,GAEV,qBAAKC,UAAU,YAAf,SACGD,EAAMG,QAAQS,KAAI,SAACC,GAAD,OACjB,cAAC,EAAD,CAAoBV,QAASU,GAAlBA,EAAKT,UCPXU,G,MAAS,SAACd,GACrB,OACE,uBACEC,UAAU,SACVc,KAAK,SACLC,YAAahB,EAAMgB,YACnBC,SAAUjB,EAAMkB,iBC8BPC,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,aAAc,GACdC,YAAa,IAJH,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEP,aAAcM,S,+BAExC,IAAD,SAC+BE,KAAKT,MAAnCC,EADD,EACCA,aAAcC,EADf,EACeA,YAChBQ,EAAeT,EAAaU,QAAO,SAACC,GAAD,OACvCA,EAAM1B,KAAK2B,cAAcC,SAASZ,EAAYW,kBAGhD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEiB,aAAc,SAACiB,GACb,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,SAExCrB,YAAY,oBAEd,cAAC,EAAD,CAAUb,QAAS2B,W,GA7BTQ,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27d88ce9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card-styles.css\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`}\r\n        alt=\"Img Monsters\"\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <h3>{props.monster.address.city}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list-styles.css\";\r\nimport \"../card/card-component\";\r\nimport { Card } from \"../card/card-component\";\r\n\r\nexport const CardList = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monster.map((mons) => (\r\n        <Card key={mons.id} monster={mons} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-styles.css\";\r\n\r\nexport const Search = (props) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={props.placeholder}\r\n      onChange={props.handlerEvent}\r\n    />\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list-component\";\nimport { Search } from \"./components/search/search-component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsterNames: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((resp) => this.setState({ monsterNames: resp }));\n  }\n  render() {\n    const { monsterNames, searchField } = this.state;\n    const filteredMons = monsterNames.filter((monst) =>\n      monst.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          handlerEvent={(e) => {\n            this.setState({ searchField: e.target.value });\n          }}\n          placeholder=\"Search Monsters\"\n        ></Search>\n        <CardList monster={filteredMons}></CardList>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}